import com.nolimitscoaster.SceneObject;
import com.nolimitscoaster.Tools;
import com.nolimitscoaster.Train;
import com.nolimitscoaster.Coaster;
import com.nolimitscoaster.Block;
import com.nolimitscoaster.Section;

import nlvm.math3d.Vector3f;

import blockhelper.BlockHelper;

public class StartNode extends blockblocks.BlockLogicBuilder {
    private static final int STATE_IDLE = 0; // waiting for train
    private static final int STATE_READY = 1; // train entered block, query next waypoint
    private static final int STATE_MOVING = 2; // track moving to next waypoint
    private static final int STATE_RESET_READY = 3; // track at end position, start reset process
    private static final int STATE_RESET_MOVING = 4; // train resetting
    private static final int STATE_DELAY = 5; // delaying before movement
    private static final int STATE_RESET_DELAY = 6; // delaying before reset movement
    private static final int STATE_FINISHED = 7; // at end position, waiting for wireframe
    private static final int STATE_DROP = 8; // freefall state
    private static final int STATE_STOPPED = 9; // wireframe arrived, attaching
    private static final int STATE_DROP_BRAKE = 10; // brake force applied after freefall
    private static final int STATE_DROP_ALIGN = 11; // realign to end position after freefall
    private static final int STATE_DROP_BOTTOM = 12; // at bottom of drop, waiting for clear
    private static final int STATE_FAKEOUT_DROP = 13; // fakeout pre-drop before the big one
    private static final int STATE_FAKEOUT_DELAY = 14; // delay between fakeout and real drop

    private static final int ANIMATION_C1 = 0;
    private static final int ANIMATION_C2 = 1;
    private static final int ANIMATION_QUINTIC = 2;
    private static final int ANIMATION_CUBIC = 3;
    private static final int ANIMATION_LINEAR = 4;
    private static final int ANIMATION_TELEPORT = 5;

    private static final int EASING_BOTH = 0;
    private static final int EASING_IN = 1;
    private static final int EASING_OUT = 2;

    private static final float G = 9.81f; // acceleration onset due to gravitational force during freefall

    private int currentWaypoint;
    private int id; // id of special track, used to link waypoints
    private int state; // current state, enumerated by constants STATE_{name}
    private Vector3f initialTrans;
    private Vector3f initialRot;
    private SceneObject sco; // track sco
    private Train currentTrain; // train currently on the special track
    private WaypointController controller; // waypoint controller assigned to this id

    private double delay; // timer before next action
    private double length; // length left of current animation
    private double totalLength; // total length of current animation
    private int animation; // animation enumerator, shown above through constants ANIMATION_{name}
    private SceneObject prev; // previous waypoint sco
    private SceneObject next; // next waypoint sco
    private int easingStyle; // easing style for current animation, enumerated by EASING_{name}

    private float velocity = 0; // current velocity in freefall, calculated at runtime
    private float dropLength; // full length of drop, calculated at runtime
    private float brakeLength; // length in metres of brakes at the bottom of a drop
    private float brakeStrength; // deceleration in m/s^2
    private bool fakeout; // whether or not to do a smaller "fakeout" drop before the full one

    private bool isBlockSetupStart = false; // block blocks stuff

    private Block entryBlock;
    private Section entrySection;

    private Vector3f prevTrans = new Vector3f();

    public bool onInit() {
        this.sco = sim.getSceneObjectForEntityId(this.getParentEntityId());
        this.isBlockSetupStart = super.onInit(this.sco);

        if (this.sco == null) {
            System.err.println("Script must be assigned to a scene object");
            return false;
        }

        Integer id_obj = this.sco.getIntegerParameter("id");
        if (id_obj == null) {
            System.err.println("Parameter id missing from scene object");
            return false;
        }
        this.id = id_obj.intValue();

        Coaster coaster = sim.getCoaster("Wireframe");
        if (coaster == null) {
            System.err.println("No coaster found with name \"Wireframe\"");
            return false;
        }

        Double brakeLength_obj = this.sco.getDoubleParameter("brakes");
        if (brakeLength_obj == null) {
            System.err.println("Parameter brake length missing from scene object");
            return false;
        }
        this.brakeLength = (float) brakeLength_obj.doubleValue();

        Boolean fakeout_obj = this.sco.getBooleanParameter("fakeout");
        if (fakeout_obj == null) {
            System.err.println("Parameter fakeout missing from scene object");
            return false;
        }
        this.fakeout = fakeout_obj.boolValue();

        this.entryBlock = this.sco.getBlockParameter("block");
        if (this.entryBlock == null) {
            System.err.println("No block assigned to start node.");
            return false;
        }
        this.entrySection = this.entryBlock.getSection();

 
        this.initialTrans = this.sco.getTranslation();
        this.initialRot = this.sco.getRotation();
        this.currentWaypoint = 0;

        this.controller = WaypointController.getOrCreateWaypointController(this.id);
        this.controller.addStartWaypoint(this.sco);
        return true;
    }

    private bool doMove(float tick) {
        Vector3f goalTrans = this.next.getTranslation();
        Vector3f goalRot = this.next.getRotation();
        Vector3f startTrans = this.prev.getTranslation();
        Vector3f startRot = this.prev.getRotation();

        Vector3f temp = new Vector3f(); // used for lerping later
        float alpha = 1 - (float) (this.length / this.totalLength);
        switch (this.easingStyle) { // convert timer into usable lerp value
          case EASING_BOTH:
            break;
          case EASING_IN:
            alpha /= 2;
            break;
          case EASING_OUT:
            alpha /= 2;
            alpha += 0.5f;
            break;
        }
        // clamp value between 0 and 1
        if (alpha < 0) {
            alpha = 0;
        } else if (alpha > 1) {
            alpha = 1;
        }
        if (this.currentWaypoint == 0) {
            // returning to start position
            goalTrans = initialTrans;
            goalRot = initialRot;
        }
        if (this.prev == this.sco) {
            // moving away from start position
            startTrans = this.initialTrans;
            startRot = this.initialRot;
        }

        switch (this.animation) {
            // switches between smoothstep formulas
            case ANIMATION_C2:
                alpha = (float) Tools.switchRampC2(1, 1, 0.25, alpha);
                break;
            case ANIMATION_C1:
                alpha = (float) Tools.switchRampC1(1, 1, 0.25, alpha);
                break;
            case ANIMATION_QUINTIC:
                alpha = (float) Tools.quinticRamp(alpha);
                break;
            case ANIMATION_CUBIC:
                alpha = (float) Tools.cubicRamp(alpha);
                break;
            case ANIMATION_TELEPORT:
                this.sco.setTranslation(goalTrans);
                this.sco.setRotation(goalRot);
                return true;
        }

        switch (this.easingStyle) {
            case EASING_OUT:
                alpha -= 0.5;
            case EASING_IN:
                alpha *= 2;
        }

        temp.lerp(alpha, startTrans, goalTrans);
        this.sco.setTranslation(temp);
        temp.lerp(alpha, startRot, goalRot);
        this.sco.setRotation(temp);

        if (this.length <= 0) {
            // timer ran out, animation is done
            return true;
        }
        // decrement timer
        this.length -= tick;
        return false;
    }

    // applies displacement from velocity over time
    private void applyVelocity(float tick) {
        Vector3f temp = this.sco.getTranslation();
        temp.add(new Vector3f(0.0f, -this.velocity * tick, 0.0f));
        this.sco.setTranslation(temp);
    }

    public void onNextFrame(float tick) {
        if (this.isBlockSetupStart) {
            super.onNextFrame(tick);
        }

        if (this.entryBlock.getState() == BlockHelper.STATE_BLOCK_BEFORE_TRIGGER) {
            this.currentTrain = this.entrySection.getTrainOnSection();
        }

        if (this.state != STATE_IDLE) {
            this.entryBlock.setState(BlockHelper.STATE_BLOCK_SPECIAL);
            this.entryBlock.getSection().setBrakesOff();
            this.entryBlock.getSection().setTransportsStandardFwdOn();
        }

        switch (this.state) {
            case STATE_IDLE: // wait for stopped train
                if (this.currentTrain != null && this.currentTrain.getSpeed() == 0) {
                    // train stopped on entry brake, unlock from wireframe and lock to special track
                    TrainController.getOrCreateTrainController(this.currentTrain).unlockFromWireframe();
                    TrainController.getOrCreateTrainController(this.currentTrain).lockToSCO(this.sco);
                    this.state = STATE_READY;
                }
                break;
            case STATE_READY: // train stopped, set up for movement
                this.prev = this.controller.getWaypoint(this.currentWaypoint);
                this.delay = this.prev.getDoubleParameter("delay").doubleValue();
                if (this.currentWaypoint == this.controller.getLength()) {
                    // reached end point
                    this.state = STATE_FINISHED;
                    break;
                }
                this.animation = this.prev.getIntegerParameter("animation").intValue();
                this.easingStyle = this.prev.getIntegerParameter("easing").intValue();
                this.length = this.prev.getDoubleParameter("length").doubleValue();
                this.totalLength = this.length;
                this.currentWaypoint++;
                this.next = this.controller.getWaypoint(this.currentWaypoint);
                this.state = STATE_DELAY;
                break;
            case STATE_DELAY: // ready to move, start timer for movement delay if needed
                if (this.delay <= 0) {
                    // no delay is needed or timer has expired, so start movement
                    if (this.sco.getBooleanParameter("drop").boolValue()) {
                        // calculate needed values for freefall calculation, and enter drop state
                        this.dropLength = this.sco.getTranslation().y
                                - this.controller.getWaypoint(1).getTranslation().y;
                        if (this.fakeout) {
                            this.dropLength -= 0.5f;
                            this.totalLength = 0.25f;
                            this.length = this.totalLength;
                        }

                        this.brakeStrength = (G * (this.dropLength - this.brakeLength)) / this.brakeLength;
                        this.state = this.fakeout ? STATE_FAKEOUT_DROP : STATE_DROP;
                        break;
                    }
                    // not dropping, so start normal movement
                    this.state = STATE_MOVING;
                    break;
                }
                // decrement timer
                this.delay -= (double) tick;
                break;
            case STATE_MOVING: // move to next waypoint
                if (this.doMove(tick)) {
                    // has reached next waypoint, so go back to set up again
                    this.state = STATE_READY;
                }
                break;
            case STATE_FINISHED: // reached end waypoint, so wait for train to stop
                if (this.currentTrain.getSpeed() == 0) {
                    // train has stopped so lock to wireframe and update state
                    TrainController.getOrCreateTrainController(this.currentTrain).unlockFromSCO();
                    TrainController.getOrCreateTrainController(this.currentTrain).lockToWireframe();
                    this.state = STATE_STOPPED;
                }
                break;
            case STATE_STOPPED: // train stopped on exit brake, wait to clear block
                if (this.currentTrain.getSpeed() != 0) {
                    // train is leaving exit brake, so change state to prepare for reset
                    this.state = STATE_RESET_DELAY;
                }
                break;
            case STATE_RESET_DELAY: // delay before reset to allow for train to fully clear
                if (this.delay <= 0) {
                    // no delay needed or timer expired, so prepare for reset
                    this.state = STATE_RESET_READY;
                    break;
                }
                // decrement timer
                this.delay -= (double) tick;
                break;
            case STATE_RESET_READY: // prepare for reset
                if (this.currentWaypoint == 0) {
                    // at start position already, so return to idle state
                    this.state = STATE_IDLE;
                    this.currentTrain = null;
                    break;
                }
                this.prev = this.controller.getWaypoint(this.currentWaypoint);
                if (this.currentWaypoint == this.controller.getLength()
                        && this.prev.getBooleanParameter("simple-reset").boolValue()) {
                    // at end and simple reset is enabled, so return back to start position
                    this.currentWaypoint = 0;
                    this.next = this.controller.getWaypoint(this.currentWaypoint);
                    this.animation = this.prev.getIntegerParameter("reset-anim").intValue();
                    this.easingStyle = EASING_BOTH;
                    this.length = this.prev.getDoubleParameter("reset-length").doubleValue();
                    this.totalLength = this.length;
                    this.state = STATE_RESET_MOVING;
                    break;
                }
                // decrement waypoint to follow in reverse order
                this.currentWaypoint--;
                this.next = this.controller.getWaypoint(this.currentWaypoint);
                this.animation = this.next.getIntegerParameter("animation").intValue();
                this.length = this.next.getDoubleParameter("length").doubleValue();
                this.totalLength = this.length;
                this.state = STATE_RESET_MOVING;
                break;
            case STATE_RESET_MOVING: // movement for reset
                if (this.doMove(tick)) {
                    // reached waypoint, so go back to set up for next
                    this.state = STATE_RESET_READY;
                }
                break;
            case STATE_DROP: // freefall state
                // adding 0.1m to brake range to stop it overshooting, it'll lerp down later anyway
                if (this.sco.getTranslation().y
                        - this.controller.getWaypoint(1).getTranslation().y <= this.brakeLength + 0.1) {
                    // if in brake range, start braking
                    this.state = STATE_DROP_BRAKE;
                    break;
                }
                this.velocity += (G * tick); // apply acceleration onset due to gravitational forces
                this.applyVelocity(tick); // calculate and apply displacement from velocity
                break;
            case STATE_DROP_BRAKE: // braking from freefall
                this.velocity -= (this.brakeStrength * tick); // decelerate from braking (ignoring G)
                if (this.velocity <= 0) {
                    // deceleration cannot make track go up, so clamp to 0+
                    // if stopped, assume at the bottom of the drop
                    this.velocity = 0;
                    //this.delay = 0.25;
                    this.state = STATE_DROP_BOTTOM;
                    break;
                }
                this.applyVelocity(tick);
                break;
            case STATE_DROP_BOTTOM: // freefall sequence completed, set up for aligning to bottom track
                //this.delay -= tick;
                //if (this.delay <= 0) {
                    this.totalLength = 0.5f;
                    this.length = this.totalLength;
                    this.state = STATE_DROP_ALIGN;
                    this.prevTrans = this.sco.getTranslation();
                //}
                break;
            case STATE_DROP_ALIGN: // lerp into aligned position
                this.length -= tick;
                if (this.length <= 0) {
                    // animation completed, so set to finished
                    this.sco.setTranslation(this.controller.getWaypoint(1).getTranslation());
                    this.delay = this.controller.getWaypoint(1).getDoubleParameter("delay").doubleValue();
                    this.state = STATE_FINISHED;
                } else {
                    // lerp to aligned position
                    Vector3f trans = new Vector3f();
                    trans.lerp((float) (this.length / this.totalLength),
                            this.controller.getWaypoint(1).getTranslation(), this.prevTrans);
                    this.sco.setTranslation(trans);
                }
                break;
            case STATE_FAKEOUT_DROP: // pre-drop
                this.length -= tick;
                Vector3f goal = new Vector3f(this.initialTrans);
                goal.sub(new Vector3f(0, 0.5f, 0));

                if (this.length <= 0) {
                    this.sco.setTranslation(goal);
                    this.delay = 1.0;
                    this.state = STATE_FAKEOUT_DELAY;
                    break;
                } else {
                    Vector3f trans = new Vector3f();
                    trans.lerp((float) (this.length / this.totalLength),
                            goal, this.initialTrans);
                    this.sco.setTranslation(trans);
                }
                break;
            case STATE_FAKEOUT_DELAY: // delay between fakeout and real drop
                if (this.delay <= 0) {
                    this.state = STATE_DROP;
                    break;
                }
                this.delay -= (double) tick;
                break;
        }
    }
}
