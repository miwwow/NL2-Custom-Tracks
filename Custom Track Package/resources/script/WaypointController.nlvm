import com.nolimitscoaster.SceneObject;
import com.nolimitscoaster.Script;

import nlvm.lang.Integer;

import nlvm.util.Vector;

public class WaypointController extends Script {
    private static Vector controllers = new Vector();

    private Vector waypoints = new Vector();
    private SceneObject end;

    private WaypointController(int id) {
        controllers.setElementAt(this, id);
    }

    public static WaypointController getOrCreateWaypointController(int id) {
        if (controllers.size() < (id + 1)) {
            // assuming ids are incremented by 1 each time, minor optimisation    
            controllers.setSize(id + 1);
        }
        if (controllers.elementAt(id) == null) {
            // no controller exists, so create a new one
            return new WaypointController(id);
        }
        // controller exists, so return that instead
        return (WaypointController) controllers.elementAt(id);
    }

    public void addWaypoint(SceneObject waypoint) {
        Integer pos = waypoint.getIntegerParameter("position");
        if (pos == null) {
            // only waypoint without position should be the end, so end here
            this.end = waypoint;
            return;
        } else if (pos == 0) {
            System.err.println("Waypoint cannot have position 0. Positions must start counting from 1");
        }

        int pos_int = pos.intValue();
        if (this.waypoints.size() < (pos_int + 1)) {
           // minor optimisation, probably doesn't add anything
           this.waypoints.setSize(pos_int + 1);
        }
        this.waypoints.setElementAt(waypoint, pos_int);
    }

    public void addStartWaypoint(SceneObject waypoint) {
        if (this.waypoints.size() < 1) {
           this.waypoints.setSize(1);
        }
        this.waypoints.setElementAt(waypoint, 0);
    }

    public SceneObject getWaypoint(int pos) {
        if (pos > this.waypoints.size()) {
            // position cannot exist, as it exceeds the boundaries of the vector
            return null;
        } else if (pos == this.waypoints.size()) {
            // position must be the end, as it is the greatest possible position value
            return end;
        }
        // normal case, return waypoint for position
        return (SceneObject) waypoints.elementAt(pos);
    }

    public int getLength() {
        return this.waypoints.size();
    }
}
